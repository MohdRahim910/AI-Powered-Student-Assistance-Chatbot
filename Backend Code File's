from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import requests
from bs4 import BeautifulSoup
import openai
from docx import Document
import PyPDF2
import os

openai.api_key = os.getenv("YOUR-OPENAI-KEY")

app = FastAPI()

# CORS so frontend can talk to backend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Hardcoded URLs and File Paths
websites = [
    "https://presidencyuniversity.in/",
    "https://presidencyuniversity.in/placements/placement-overview",
    "https://presidencyuniversity.in/school/school-of-computer-science-engineering/faculty"
]

file_paths = [
    "curriculum_report.pdf",
    "program_outcome.pdf"
]

def fetch_content_from_url(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        paragraphs = soup.find_all('p')
        return " ".join(p.get_text() for p in paragraphs)
    except Exception as e:
        print(f"Error fetching URL: {e}")
        return ""

def read_pdf_file(file_path):
    try:
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            return " ".join([page.extract_text() or "" for page in reader.pages])
    except Exception as e:
        print(f"Error reading PDF: {e}")
        return ""

def read_docx_file(file_path):
    try:
        doc = Document(file_path)
        return " ".join([para.text for para in doc.paragraphs])
    except Exception as e:
        print(f"Error reading DOCX: {e}")
        return ""

def get_all_context():
    content = ""
    for url in websites:
        content += f"\nFrom {url}:\n{fetch_content_from_url(url)}\n"

    for path in file_paths:
        if path.endswith('.pdf'):
            content += f"\nFrom {path}:\n{read_pdf_file(path)}\n"
        elif path.endswith('.docx'):
            content += f"\nFrom {path}:\n{read_docx_file(path)}\n"

    return content

def generate_answer(question, context):
    messages = [
        {"role": "system", "content": "You are an assistant that answers the questions in simple and short way using provided context."},
        {"role": "user", "content": f"User Question: {question}\n\nContext:\n{context}\n\nAnswer clearly and helpfully."}
    ]

    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=messages
    )
    return response.choices[0].message.content

# Request models
class Message(BaseModel):
    role: str
    content: str

class ChatRequest(BaseModel):
    messages: List[Message]

@app.post("/chat")
async def chat(data: ChatRequest):
    question = data.messages[-1].content  # latest user message
    context_data = get_all_context()
    answer = generate_answer(question, context_data)
    return {"response": answer}
